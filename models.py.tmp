class ChatUser(models.Model):
    def __str__(self):
        return self.name

    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    name = models.CharField(max_length=20, unique=True)
    contacts = models.ManyToManyField('self',
                                      through=UserRelation,
                                      symmetrical=False,
                                      related_name="+")


    def update_relation(self, target, status=UserRelation.RelationType.INVIT):
        try :
            rel = UserRelation.objects.get(from_user=self, to_user=target)
            # self.outbox.get(to_user=target)
            rel.status = status
            rel.save()
        except ObjectDoesNotExist:
            UserRelation.objects.create(from_user=self, to_user=target, status=status)
            # self.outbox.create(to_user=target, status=status)

    def get_relation(self, target):
        try :
            return UserRelation.objects.get(from_user=self, to_user=target).status
            # return self.outbox.get(to_user=target).status
        except ObjectDoesNotExist:
            return None

    def delete_relation(self, target):
        UserRelation.objects.get(from_user=self, to_user=target).delete()
        # self.outbox.get(from_user=self, to_user=target).delete()


    def get_block_list(self):
        return UserRelation.objects.outbox.filter(from_user=self, status='B')
        # return self.outbox.filter(status='B')

    def get_blocked_by_list(self):
        return UserRelation.objects.inbox.filter(from_user=self, status='B')
        # return self.inbox.filter(status='B')

    def get_invitation_list(self):
        return UserRelation.objects.outbox.filter(from_user=self, status='I')
        # return self.outbox.filter(status='I')

    def get_invitation_by_list(self):
        return UserRelation.objects.inbox.filter(from_user=self, status='I')
        # return self.inbox.filter(status='I')


    def get_contacts_by_status(self, status='C'):
        return self.contacts.filter(
            inbox__status=status)
