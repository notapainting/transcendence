volumes:
 certs:
   driver: local
 esdata01:
   driver: local
 kibanadata:
   driver: local
 metricbeatdata01:
   driver: local
 filebeatdata01:
   driver: local
 logstashdata01:
   driver: local


networks:
  elk_log:
   internal: false

services:
 setup:
   container_name: setup
   environment:
     - "ELASTIC_USER=${ELASTIC_USER}"
     - "ELASTIC_PASSWORD=${ELASTIC_PASSWORD}"
     - "KIBANA_PASSWORD=${KIBANA_PASSWORD}"
   build:
      context: ./elk/setup
      dockerfile: Dockerfile
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: bash /usr/share/elasticsearch/tools/setup.sh
   healthcheck:
     test: 
       [
         "CMD-SHELL", 
         "[ -f config/certs/elasticsearch/elasticsearch.crt ]"
       ]
     interval: 1s
     timeout: 5s
     retries: 120
   networks:
    - app_network
    - elk_log


# Elasticsearch
 elasticsearch:
   container_name: elasticsearch
   depends_on:
     setup:
       condition: service_healthy
   build: 
     context: ./elk/elasticsearch
     dockerfile: Dockerfile
   labels:
     co.elastic.logs/module: elasticsearch
   volumes:
     - certs:/usr/share/elasticsearch/config/certs:ro
     - esdata01:/usr/share/elasticsearch/data
   ports:
     - ${ES_PORT}:9200
   environment:
     - node.name=elasticsearch
     - cluster.name=${CLUSTER_NAME}
     - discovery.type=single-node
     - ELASTIC_USER=${ELASTIC_USER}
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - bootstrap.memory_lock=true
     - xpack.security.enabled=true
     - xpack.security.http.ssl.enabled=true
     - xpack.security.http.ssl.key=certs/elasticsearch/elasticsearch.key
     - xpack.security.http.ssl.certificate=certs/elasticsearch/elasticsearch.crt
     - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.enabled=true
     - xpack.security.transport.ssl.key=certs/elasticsearch/elasticsearch.key
     - xpack.security.transport.ssl.certificate=certs/elasticsearch/elasticsearch.crt
     - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
     - xpack.security.transport.ssl.verification_mode=certificate
     - xpack.license.self_generated.type=${LICENSE}
   mem_limit: ${ES_MEM_LIMIT}
   ulimits:
     memlock:
       soft: -1
       hard: -1
   healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120
   networks:
    - app_network
    - elk_log


# Kibana    
 kibana:
   container_name: kibana
   depends_on:
     elasticsearch:
       condition: service_healthy
   build:
     context: ./elk/kibana
     dockerfile: Dockerfile
   labels:
     co.elastic.logs/module: kibana
   volumes:
     - certs:/usr/share/kibana/config/certs:ro
     - kibanadata:/usr/share/kibana/data
   ports:
     - 5601:5601
   environment:
     - SERVERNAME=kibana-server
     - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
     - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
     - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
     - ELASTIC_USER=${ELASTIC_USER}
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
     - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
     - SERVER_PUBLICBASEURL=https://localhost:5601
     - SERVER_SSL_CERTIFICATE=config/certs/kibana-server/kibana-server.crt
     - SERVER_SSL_KEY=config/certs/kibana-server/kibana-server.key
     - SERVER_SSL_ENABLED=true
   mem_limit: ${KB_MEM_LIMIT}
   healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -k -s -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
   networks:
    - app_network
    - elk_log

 filebeat01:
   container_name: filebeat
   depends_on:
     elasticsearch:
       condition: service_healthy
     logstash01:
       condition: service_healthy
     kibana:
       condition: service_healthy    
   build:
      context: ./elk/filebeat
      dockerfile: Dockerfile
   user: root
   volumes:
     - certs:/usr/share/filebeat/certs
     - filebeatdata01:/usr/share/filebeat/data
     - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
     - "/var/run/docker.sock:/var/run/docker.sock:ro"
   environment:
     - ELASTIC_USER=${ELASTIC_PASSWORD}
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://elasticsearch:9200
     - KIBANA_HOSTS=http://kibana:5601
     - LOGSTASH_HOSTS=logstash:5044
   networks:
    - app_network
    - elk_log

# Logstash
 logstash01:
   container_name: logstash
   depends_on:
     elasticsearch:
       condition: service_healthy
     kibana:
       condition: service_healthy
     policy:
      condition: service_healthy
   build:
    context: ./elk/logstash
    dockerfile: Dockerfile
   labels:
     co.elastic.logs/module: logstash
   user: root
   volumes:
     - certs:/usr/share/logstash/certs:ro
     - logstashdata01:/usr/share/logstash/data
   environment:
     - xpack.monitoring.enabled=false
     - ELASTIC_USER=${ELASTIC_USER}
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://elasticsearch:9200
   restart: always
   healthcheck:
      test:
        [
          "CMD-SHELL",
          "timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5140' && \
          timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5044' && \
          timeout 1 bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5142' || exit 1",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
   networks:
    - app_network
    - elk_log

# Elasticsearch's ILM container
 policy:
  depends_on:
    elasticsearch:
      condition: service_healthy
    kibana:
      condition: service_healthy
  container_name: policy
  image: docker:19.03-dind
  networks:
    - app_network
    - elk_log
  volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
  entrypoint: /bin/sh -c "docker exec elasticsearch sh -c '/usr/share/elasticsearch/scripts/logs_policy.sh'"
  healthcheck:
    test: 
      [
          "CMD-SHELL", "docker logs policy | grep -q 'All ILM policy configurations completed.'"
      ]
    interval: 1s
    timeout: 5s
    retries: 120
  restart: on-failure

 data_views:
    depends_on:
      policy:
        condition: service_healthy
      logstash01:
        condition: service_healthy
    container_name: data_views
    image: docker:19.03-dind
    networks:
     - app_network
     - elk_log
    volumes:
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
    entrypoint: /bin/sh -c "docker exec kibana sh -c '/usr/share/kibana/scripts/data_views.sh'"
    healthcheck:
      test: ["CMD-SHELL", "docker logs data_views | grep -q 'All Data Views creation completed.'"]
      interval: 1s
      timeout: 5s
      retries: 120
    restart: on-failure

 dashboards:
    depends_on:
      data_views:
        condition: service_healthy
    container_name: dashboards
    image: docker:19.03-dind
    networks:
     - app_network
     - elk_log
    volumes:
        - "/var/run/docker.sock:/var/run/docker.sock:ro"
    entrypoint: /bin/sh -c "docker exec kibana sh -c '/usr/share/kibana/scripts/dashboards.sh'"